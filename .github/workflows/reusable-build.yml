name: Reusable GDExtension Build

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      arch:
        required: true
        type: string
      rust_target:
        required: true
        type: string
      precision:
        required: true
        type: string
      build_target:
        required: true
        type: string # 'editor' or 'templates'
      macos_deployment_target:
        required: false
        type: string
        default: ""

jobs:
  build:
    name: Build ${{ inputs.os }}-${{ inputs.arch }}-${{ inputs.precision }}-${{ inputs.build_target }}
    runs-on: ${{ inputs.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config dbus libdbus-1-dev protobuf-compiler libprotobuf-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: choco install protoc

      - name: Download core artifacts (target)
        uses: actions/download-artifact@v4
        with:
          name: core-target-${{ runner.os == 'Windows' && 'windows' || (runner.os == 'macOS' && 'macos' || 'linux') }}-${{ inputs.arch }}-release
          path: godot-dojo-core/target

      - name: Download core artifacts (bindings)
        uses: actions/download-artifact@v4
        with:
          name: core-bindings-${{ runner.os == 'Windows' && 'windows' || (runner.os == 'macOS' && 'macos' || 'linux') }}-${{ inputs.arch }}-release
          path: bindings

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-${{ inputs.arch }}-scons-${{ inputs.precision }}-${{ inputs.build_target }}-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct') }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.arch }}-scons-${{ inputs.precision }}-${{ inputs.build_target }}-

      - name: Build GDExtension
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=${{ runner.os == 'Windows' && 'windows' || (runner.os == 'macOS' && 'macos' || 'linux') }}"
          ARCH_ARG="arch=${{ inputs.arch }}"
          PRECISION_ARG="precision=${{ inputs.precision }}"
          export CARGO_BUILD_TARGET=${{ inputs.rust_target }}

          if [ "${{ runner.os }}" = "macOS" ]; then
            export MACOSX_DEPLOYMENT_TARGET=${{ inputs.macos_deployment_target }}
            export RUSTFLAGS="${RUSTFLAGS:+$RUSTFLAGS }-C link-arg=-mmacosx-version-min=${{ inputs.macos_deployment_target }}"
          fi

          mkdir -p demo/addons/godot-dojo

          if [ "${{ inputs.build_target }}" = "templates" ]; then
            scons $PLATFORM_ARG $ARCH_ARG target=template_debug $PRECISION_ARG -j2
            scons $PLATFORM_ARG $ARCH_ARG target=template_release $PRECISION_ARG -j2
          else
            scons $PLATFORM_ARG $ARCH_ARG target=${{ inputs.build_target }} $PRECISION_ARG -j2
          fi

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ inputs.precision }}-${{ runner.os == 'Windows' && 'windows' || (runner.os == 'macOS' && 'macos' || 'linux') }}-${{ inputs.arch }}-${{ inputs.build_target }}
          path: |
            demo/addons/godot-dojo/
            ${{ runner.os == 'Windows' && format('godot-dojo-core/target/{0}/release/dojo_c.dll', inputs.rust_target) || '' }}
          if-no-files-found: error