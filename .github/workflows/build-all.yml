name: Build & Package All Platforms

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      changelog_content: ${{ steps.changelog.outputs.content }}
      commits_log: ${{ steps.get_commits.outputs.commits }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Extract latest changelog entries
        id: changelog
        run: |
          # Extract the latest section from CHANGELOG.md (between the first two ## headers)
          LATEST_CHANGELOG=$(awk '/^## \\[Unreleased\\]/{flag=1;next}/^## /{if(flag)exit}flag' CHANGELOG.md)
          # Set output using multiline string
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$LATEST_CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get commits since last tag
        id: get_commits
        run: |
          # Get the current tag
          CURRENT_TAG=${GITHUB_REF#refs/tags/}

          # Find the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $CURRENT_TAG^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            # If there's no previous tag, get all commits excluding those with '.idea' in the message
            COMMITS_LOG=$(git log --pretty=format:"- %h %s (%an)" --invert-grep --grep=".idea" $CURRENT_TAG)
          else
            # Get commits between the previous tag and the current tag, excluding those with '.idea' in the message
            COMMITS_LOG=$(git log --pretty=format:"- %h %s (%an)" --invert-grep --grep=".idea" $PREVIOUS_TAG..$CURRENT_TAG)
          fi

          COMMIT_COUNT=$(echo "$COMMITS_LOG" | wc -l)

          if [ $COMMIT_COUNT -gt 10 ]; then
            COMMITS=$(echo "$COMMITS_LOG" | head -n 10)
            COMMITS="$COMMITS\\n\\n[See all commits](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)"
          else
            COMMITS="$COMMITS_LOG"
          fi

          # Set output using multiline string
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo -e "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if tag is from main branch
        id: check_branch
        run: |
          # Get the commit that the tag points to
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref }})

          # Check if this commit is part of the main branch
          if git branch -r --contains $TAG_COMMIT | grep -q "origin/main"; then
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Get godot-cpp version
        id: get_godotcpp_version
        run: |
          GODOTCPP_VERSION=$(cd external/godot-cpp && (git describe --tags --abbrev=0 2>/dev/null || git rev-parse --short HEAD))
          echo "GODOTCPP_VERSION=$GODOTCPP_VERSION" >> $GITHUB_OUTPUT

      - name: Get Core Dependencies versions
        id: get_core_deps
        run: |
          cd godot-dojo-core

          # Parse dojo-c from [dependencies] in Cargo.toml
          DOJO_C_LINE=$(awk '/\[dependencies\]/{f=1;next} /\[/{f=0} f && /dojo-c =/' Cargo.toml)
          DOJO_C_URL=$(echo "$DOJO_C_LINE" | grep -o 'git = "[^"]*"' | sed 's/git = "//;s/"//')
          DOJO_C_TAG=$(echo "$DOJO_C_LINE" | grep -o 'tag = "[^"]*"' | sed 's/tag = "//;s/"//')

          # Parse controller-uniffi from [dependencies] in Cargo.toml
          CONTROLLER_LINE=$(awk '/\[dependencies\]/{f=1;next} /\[/{f=0} f && /controller-uniffi =/' Cargo.toml)
          CONTROLLER_URL=$(echo "$CONTROLLER_LINE" | grep -o 'git = "[^"]*"' | sed 's/git = "//;s/"//')
          CONTROLLER_REV=$(echo "$CONTROLLER_LINE" | grep -o 'rev = "[^"]*"' | sed 's/rev = "//;s/"//')
          CONTROLLER_REV_SHORT=${CONTROLLER_REV:0:7}

          # Set individual outputs for each dependency
          echo "dojo_c_version=[dojo.c]($DOJO_C_URL/releases/tag/$DOJO_C_TAG) ($DOJO_C_TAG)" >> $GITHUB_OUTPUT
          echo "controller_c_version=[controller.c]($CONTROLLER_URL/tree/$CONTROLLER_REV) ($CONTROLLER_REV_SHORT)" >> $GITHUB_OUTPUT


      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ github.ref_name }}"
          body: |
            ## Latest Changes

            ${{ steps.changelog.outputs.content }}

            ### Commits Since Last Tag
            ${{ steps.get_commits.outputs.commits }}
            
            ### Target dependecies:
            - Godot ${{ steps.get_godotcpp_version.outputs.GODOTCPP_VERSION }}
            - ${{ steps.get_core_deps.outputs.dojo_c_version }}
            - ${{ steps.get_core_deps.outputs.controller_c_version }}
              note: Godot target is minimum version, so it should work with 4.3+

          draft: false
          prerelease: ${{ steps.check_branch.outputs.is_prerelease == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-rust-core:
    name: Build Core Crate (${{ matrix.platform.os_name }}${{ matrix.job_name_suffix && format('-{0}', matrix.job_name_suffix) || '' }}-${{ matrix.profile }})
    runs-on: ${{ matrix.platform.os }}
    needs: create_release
    if: needs.create_release.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            os_name: linux
            target: x86_64-unknown-linux-gnu
          - os: macos-latest # arm64 runner
            os_name: macos
            target: aarch64-apple-darwin
          - os: macos-13 # x86_64 runner
            os_name: macos
            target: x86_64-apple-darwin
          - os: windows-latest
            os_name: windows
            target: x86_64-pc-windows-msvc
        profile: [debug, release]
        include:
          - platform:
              os_name: linux
              target: x86_64-unknown-linux-gnu
            job_name_suffix: x86_64
          - platform:
              os_name: macos
              target: aarch64-apple-darwin
            job_name_suffix: arm64
          - platform:
              os_name: macos
              target: x86_64-apple-darwin
            job_name_suffix: x86_64
          - platform:
              os_name: windows
              target: x86_64-pc-windows-msvc
            job_name_suffix: x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Linux build dependencies
        if: matrix.platform.os_name == 'linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config libdbus-1-dev protobuf-compiler libprotobuf-dev

      - name: Set up Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install macOS build dependencies
        if: matrix.platform.os_name == 'macos'
        run: brew install protobuf

      - name: Install Windows build dependencies
        if: matrix.platform.os_name == 'windows'
        run: choco install protoc

      - name: Install uniffi-bindgen-cpp from source
        run: cargo install --git https://github.com/Larkooo/uniffi-bindgen-cpp --branch update-0.30 uniffi-bindgen-cpp

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-deps-

      - name: Build godot-dojo-core
        shell: bash
        working-directory: godot-dojo-core
        run: |
          BUILD_ARGS=""
          if [ "${{ matrix.profile }}" = "release" ]; then
            BUILD_ARGS="--release"
          fi
          
          cargo build $BUILD_ARGS --target ${{ matrix.platform.target }}

      - name: Upload core artifacts (target)
        uses: actions/upload-artifact@v4
        with:
          # For macOS, we add the target to the name to differentiate archs
          name: core-target-${{ matrix.platform.os_name }}-${{ matrix.platform.os_name != 'macos' && matrix.profile || format('{0}-{1}', matrix.platform.target, matrix.profile) }}
          path: godot-dojo-core/target
          if-no-files-found: error

      - name: Upload core artifacts (bindings)
        uses: actions/upload-artifact@v4
        with:
          name: core-bindings-${{ matrix.platform.os_name }}-${{ matrix.platform.os_name != 'macos' && matrix.profile || format('{0}-{1}', matrix.platform.target, matrix.profile) }}
          path: bindings
          if-no-files-found: error

  build-linux-debug:
    name: Build Linux-x86_64-${{ matrix.precision }}-template-debug
    runs-on: ubuntu-latest
    needs: build-linux-editor
    if: needs.build-linux-editor.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config dbus libdbus-1-dev protobuf-compiler libprotobuf-dev

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        run: |
          mv core-target-linux-debug/target godot-dojo-core/
          mv core-bindings-linux-debug/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-linux-x86_64-debug-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-linux-x86_64-debug-
            ${{ runner.os }}-scons-${{ matrix.precision }}-linux-x86_64-
            ${{ runner.os }}-cargo-${{ matrix.precision }}-linux-

      - name: Build debug
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=linux"
          ARCH_ARG="arch=x86_64"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          # Debug
          scons $PLATFORM_ARG $ARCH_ARG target=template_debug $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-linux-x86_64-debug
          path: demo/addons/godot-dojo/
          if-no-files-found: error

  build-linux-release:
    name: Build Linux-x86_64-${{ matrix.precision }}-template-release
    runs-on: ubuntu-latest
    needs: build-linux-debug
    if: needs.build-linux-debug.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config dbus libdbus-1-dev protobuf-compiler libprotobuf-dev

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        run: |
          mv core-target-linux-release/target godot-dojo-core/
          mv core-bindings-linux-release/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-linux-x86_64-release-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-linux-x86_64-release-
            ${{ runner.os }}-scons-${{ matrix.precision }}-linux-x86_64-
            ${{ runner.os }}-cargo-${{ matrix.precision }}-linux-

      - name: Build release
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=linux"
          ARCH_ARG="arch=x86_64"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          # Release
          scons $PLATFORM_ARG $ARCH_ARG target=template_release $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-linux-x86_64-release
          path: demo/addons/godot-dojo/
          if-no-files-found: error

  build-linux-editor:
    name: Build Linux-x86_64-${{ matrix.precision }}-editor
    runs-on: ubuntu-latest
    needs: [create_release, build-rust-core]
    if: needs.create_release.result == 'success' && needs.build-rust-core.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config dbus libdbus-1-dev protobuf-compiler libprotobuf-dev

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        run: |
          mv core-target-linux-debug/target godot-dojo-core/
          mv core-bindings-linux-debug/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-linux-x86_64-editor-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-linux-x86_64-editor-
            ${{ runner.os }}-scons-${{ matrix.precision }}-linux-x86_64-
            ${{ runner.os }}-cargo-${{ matrix.precision }}-linux-

      - name: Build editor
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=linux"
          ARCH_ARG="arch=x86_64"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          # Editor
          scons $PLATFORM_ARG $ARCH_ARG target=editor $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-linux-x86_64-editor
          path: demo/addons/godot-dojo/
          if-no-files-found: error

  build-macos-editor-arm64:
    name: Build macOS-arm64-${{ matrix.precision }}-editor
    runs-on: macos-latest # arm64 runner
    needs: [create_release, build-rust-core]
    if: needs.create_release.result == 'success' && needs.build-rust-core.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]
        arch: [arm64]
        rust_target: [aarch64-apple-darwin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: brew install protobuf

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        run: |
          # For editor, we use debug profile of rust core
          mv core-target-macos-${{ matrix.rust_target }}-debug/target godot-dojo-core/
          mv core-bindings-macos-${{ matrix.rust_target }}-debug/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-editor-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-editor-
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-

      - name: Build
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=macos"
          ARCH_ARG="arch=${{ matrix.arch }}"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=${{ matrix.rust_target }}

          export MACOSX_DEPLOYMENT_TARGET=11.0
          # Add deployment target to RUSTFLAGS
          export RUSTFLAGS="${RUSTFLAGS:+$RUSTFLAGS }-C link-arg=-mmacosx-version-min=14.0"

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          scons $PLATFORM_ARG $ARCH_ARG target=editor $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-macos-${{ matrix.arch }}-editor
          path: demo/addons/godot-dojo/
          if-no-files-found: error

  build-macos-editor-x86_64:
    name: Build macOS-x86_64-${{ matrix.precision }}-editor
    runs-on: macos-13 # x86_64 runner
    needs: [create_release, build-rust-core]
    if: needs.create_release.result == 'success' && needs.build-rust-core.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]
        arch: [x86_64]
        rust_target: [x86_64-apple-darwin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: brew install protobuf

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        run: |
          # For editor, we use debug profile of rust core
          mv core-target-macos-${{ matrix.rust_target }}-debug/target godot-dojo-core/
          mv core-bindings-macos-${{ matrix.rust_target }}-debug/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-editor-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-editor-
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-

      - name: Build
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=macos"
          ARCH_ARG="arch=${{ matrix.arch }}"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=${{ matrix.rust_target }}

          export MACOSX_DEPLOYMENT_TARGET=10.13
          # Add deployment target to RUSTFLAGS
          export RUSTFLAGS="${RUSTFLAGS:+$RUSTFLAGS }-C link-arg=-mmacosx-version-min=10.13"

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          scons $PLATFORM_ARG $ARCH_ARG target=editor $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-macos-${{ matrix.arch }}-editor
          path: demo/addons/godot-dojo/
          if-no-files-found: error

  build-macos-debug-arm64:
    name: Build macOS-arm64-${{ matrix.precision }}-debug
    runs-on: macos-latest # arm64 runner
    needs: build-macos-editor-arm64
    if: needs.build-macos-editor-arm64.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]
        arch: [arm64]
        rust_target: [aarch64-apple-darwin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: brew install protobuf

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        run: |
          mv core-target-macos-${{ matrix.rust_target }}-debug/target godot-dojo-core/
          mv core-bindings-macos-${{ matrix.rust_target }}-debug/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-debug-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-debug-
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-

      - name: Build
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=macos"
          ARCH_ARG="arch=${{ matrix.arch }}"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=${{ matrix.rust_target }}

          export MACOSX_DEPLOYMENT_TARGET=11.0
          # Add deployment target to RUSTFLAGS
          export RUSTFLAGS="${RUSTFLAGS:+$RUSTFLAGS }-C link-arg=-mmacosx-version-min=14.0"

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          scons $PLATFORM_ARG $ARCH_ARG target=template_debug $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-macos-${{ matrix.arch }}-debug
          path: demo/addons/godot-dojo/
          if-no-files-found: error

  build-macos-debug-x86_64:
    name: Build macOS-x86_64-${{ matrix.precision }}-debug
    runs-on: macos-13 # x86_64 runner
    needs: build-macos-editor-x86_64
    if: needs.build-macos-editor-x86_64.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]
        arch: [x86_64]
        rust_target: [x86_64-apple-darwin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: brew install protobuf

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        run: |
          mv core-target-macos-${{ matrix.rust_target }}-debug/target godot-dojo-core/
          mv core-bindings-macos-${{ matrix.rust_target }}-debug/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-debug-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-debug-
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-

      - name: Build
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=macos"
          ARCH_ARG="arch=${{ matrix.arch }}"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=${{ matrix.rust_target }}

          export MACOSX_DEPLOYMENT_TARGET=10.13
          # Add deployment target to RUSTFLAGS
          export RUSTFLAGS="${RUSTFLAGS:+$RUSTFLAGS }-C link-arg=-mmacosx-version-min=10.13"

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          scons $PLATFORM_ARG $ARCH_ARG target=template_debug $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-macos-${{ matrix.arch }}-debug
          path: demo/addons/godot-dojo/
          if-no-files-found: error

  build-macos-release-arm64:
    name: Build macOS-arm64-${{ matrix.precision }}-release
    runs-on: macos-latest # arm64 runner
    needs: build-macos-debug-arm64
    if: needs.build-macos-debug-arm64.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]
        arch: [arm64]
        rust_target: [aarch64-apple-darwin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: brew install protobuf

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        run: |
          mv core-target-macos-${{ matrix.rust_target }}-release/target godot-dojo-core/
          mv core-bindings-macos-${{ matrix.rust_target }}-release/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-release-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-release-
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-

      - name: Build
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=macos"
          ARCH_ARG="arch=${{ matrix.arch }}"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=${{ matrix.rust_target }}

          export MACOSX_DEPLOYMENT_TARGET=11.0
          # Add deployment target to RUSTFLAGS
          export RUSTFLAGS="${RUSTFLAGS:+$RUSTFLAGS }-C link-arg=-mmacosx-version-min=14.0"

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          scons $PLATFORM_ARG $ARCH_ARG target=template_release $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-macos-${{ matrix.arch }}-release
          path: demo/addons/godot-dojo/
          if-no-files-found: error

  build-macos-release-x86_64:
    name: Build macOS-x86_64-${{ matrix.precision }}-release
    runs-on: macos-13 # x86_64 runner
    needs: build-macos-debug-x86_64
    if: needs.build-macos-debug-x86_64.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]
        arch: [x86_64]
        rust_target: [x86_64-apple-darwin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: brew install protobuf

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        run: |
          mv core-target-macos-${{ matrix.rust_target }}-release/target godot-dojo-core/
          mv core-bindings-macos-${{ matrix.rust_target }}-release/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-release-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-release-
            ${{ runner.os }}-scons-${{ matrix.precision }}-macos-${{ matrix.arch }}-

      - name: Build
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=macos"
          ARCH_ARG="arch=${{ matrix.arch }}"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=${{ matrix.rust_target }}

          export MACOSX_DEPLOYMENT_TARGET=10.13
          # Add deployment target to RUSTFLAGS
          export RUSTFLAGS="${RUSTFLAGS:+$RUSTFLAGS }-C link-arg=-mmacosx-version-min=10.13"

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          scons $PLATFORM_ARG $ARCH_ARG target=template_release $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-macos-${{ matrix.arch }}-release
          path: demo/addons/godot-dojo/
          if-no-files-found: error


  build-windows-debug:
    name: Build Windows-x86_64-${{ matrix.precision }}-template-debug
    runs-on: windows-latest
    needs: build-windows-editor
    if: needs.build-windows-editor.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: choco install protoc

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        shell: bash
        run: |
          mv core-target-windows-debug/target godot-dojo-core/
          mv core-bindings-windows-debug/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-windows-x86_64-debug-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-windows-x86_64-debug-
            ${{ runner.os }}-scons-${{ matrix.precision }}-windows-x86_64-
            ${{ runner.os }}-cargo-${{ matrix.precision }}-windows-

      - name: Build debug
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=windows"
          ARCH_ARG="arch=x86_64"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=x86_64-pc-windows-msvc

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          # Debug
          scons $PLATFORM_ARG $ARCH_ARG target=template_debug $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-windows-x86_64-debug-with-dll
          path: |
            demo/addons/godot-dojo/
            godot-dojo-core/target/x86_64-pc-windows-msvc/debug/dojo_c.dll
          if-no-files-found: error

  build-windows-release:
    name: Build Windows-x86_64-${{ matrix.precision }}-template-release
    runs-on: windows-latest
    needs: build-windows-debug
    if: needs.build-windows-debug.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: choco install protoc

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        shell: bash
        run: |
          mv core-target-windows-release/target godot-dojo-core/
          mv core-bindings-windows-release/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-windows-x86_64-release-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-windows-x86_64-release-
            ${{ runner.os }}-scons-${{ matrix.precision }}-windows-x86_64-
            ${{ runner.os }}-cargo-${{ matrix.precision }}-windows-

      - name: Build release
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=windows"
          ARCH_ARG="arch=x86_64"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=x86_64-pc-windows-msvc

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          # Release
          scons $PLATFORM_ARG $ARCH_ARG target=template_release $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-windows-x86_64-release-with-dll
          path: |
            demo/addons/godot-dojo/
            godot-dojo-core/target/x86_64-pc-windows-msvc/release/dojo_c.dll
          if-no-files-found: error

  build-windows-editor:
    name: Build Windows-x86_64-${{ matrix.precision }}-editor
    runs-on: windows-latest
    needs: [create_release, build-rust-core]
    if: needs.create_release.result == 'success' && needs.build-rust-core.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        precision: [single, double]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies
        run: choco install protoc

      - name: Download core artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore downloaded artifacts
        shell: bash
        run: |
          mv core-target-windows-debug/target godot-dojo-core/
          mv core-bindings-windows-debug/* .

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            demo/addons/godot-dojo/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-windows-x86_64-editor-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-windows-x86_64-editor-
            ${{ runner.os }}-scons-${{ matrix.precision }}-windows-x86_64-
            ${{ runner.os }}-cargo-${{ matrix.precision }}-windows-

      - name: Build editor
        shell: bash
        run: |
          set -e
          PLATFORM_ARG="platform=windows"
          ARCH_ARG="arch=x86_64"
          PRECISION_ARG=""
          export CARGO_BUILD_TARGET=x86_64-pc-windows-msvc

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          mkdir -p demo/addons/godot-dojo

          # Editor
          scons $PLATFORM_ARG $ARCH_ARG target=editor $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-windows-x86_64-editor-with-dll
          path: |
            demo/addons/godot-dojo/
            godot-dojo-core/target/x86_64-pc-windows-msvc/debug/dojo_c.dll
          if-no-files-found: error

  package:
    name: Combine all binaries and create zip files
    runs-on: ubuntu-latest
    needs: [create_release, build-linux-debug, build-linux-release, build-linux-editor, build-macos-debug-arm64, build-macos-debug-x86_64, build-macos-release-arm64, build-macos-release-x86_64, build-macos-editor-arm64, build-macos-editor-x86_64, build-windows-debug, build-windows-release, build-windows-editor]
    if: needs.create_release.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all binaries from jobs
        uses: actions/download-artifact@v4
        with:
          path: all_bins

      - name: Prepare folders for binaries
        run: |
          # Create base directories for packaging
          mkdir -p godot-dojo-bin/addons/godot-dojo
          mkdir -p godot-dojo-double-bin/addons/godot-dojo

          # Copy the .gdextension file (it's the same for all, so we take one)
          find all_bins -name 'godot-dojo.gdextension' -print -quit | xargs -I {} cp {} godot-dojo-bin/addons/godot-dojo/
          find all_bins -name 'godot-dojo.gdextension' -print -quit | xargs -I {} cp {} godot-dojo-double-bin/addons/godot-dojo/

          # Single precision binaries
          mkdir -p godot-dojo-bin/addons/godot-dojo/
          find all_bins/bin-single-linux-* all_bins/bin-single-macos-* -name 'bin' -type d -exec cp -r {} godot-dojo-bin/addons/godot-dojo/ \;
          # Copy dojo_c.dll for windows to the correct bin folder (it's inside demo/addons/godot-dojo)
          find all_bins/bin-single-windows-* -name 'bin' -type d -exec cp -r {} godot-dojo-bin/addons/godot-dojo/ \;
          find all_bins/bin-single-windows-* -name 'dojo_c.dll' -exec cp {} godot-dojo-bin/addons/godot-dojo/bin/ \;

          # Double precision binaries
          mkdir -p godot-dojo-double-bin/addons/godot-dojo/
          find all_bins/bin-double-linux-* all_bins/bin-double-macos-* -name 'bin' -type d -exec cp -r {} godot-dojo-double-bin/addons/godot-dojo/ \;
          find all_bins/bin-double-windows-* -name 'bin' -type d -exec cp -r {} godot-dojo-double-bin/addons/godot-dojo/ \;
          find all_bins/bin-double-windows-* -name 'dojo_c.dll' -exec cp {} godot-dojo-double-bin/addons/godot-dojo/bin/ \;

      - name: Package into zip files
        run: |
          TAGNAME=${GITHUB_REF##*/}

          # Single precision zip
          cd godot-dojo-bin
          zip -r "../godot-dojo-${TAGNAME}.zip" .
          cd ..

          # Double precision zip
          cd godot-dojo-double-bin
          zip -r "../godot-dojo-double-${TAGNAME}.zip" .
          cd ..

      - name: Upload assets to release
        uses: softprops/action-gh-release@v2
        with:
          append_body: true
          body: |

            ### Downloads
            - [Single Precision](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/godot-dojo-${{ github.ref_name }}.zip)
            - [Double Precision](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/godot-dojo-double-${{ github.ref_name }}.zip)
          files: |
            godot-dojo-${{ github.ref_name }}.zip
            godot-dojo-double-${{ github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}