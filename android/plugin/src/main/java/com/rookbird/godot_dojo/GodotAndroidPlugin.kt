package com.rookbird.godot_dojo

import android.app.Activity
import android.content.Intent
import android.util.Log
import android.view.View
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import org.godotengine.godot.Godot
import org.godotengine.godot.plugin.GodotPlugin
import org.godotengine.godot.plugin.SignalInfo
import org.godotengine.godot.plugin.UsedByGodot

private val TAG = GodotAndroidPlugin::class.java.simpleName

/**
 * Godot Android plugin to handle Cartridge authentication via a WebView.
 *
 * This plugin launches a custom WebView to handle the authentication flow.
 * It intercepts the final POST request to localhost, extracts the payload,
 * and sends it back to Godot via a signal.
 *
 * NOTE: Your main Godot Activity must extend `androidx.appcompat.app.AppCompatActivity`
 * for the `registerForActivityResult` API to work correctly.
 */
class GodotAndroidPlugin(godot: Godot) : GodotPlugin(godot) {

    // Signal to send the payload back to Godot.
    // Connect to this signal in your Godot script.
    private val onAuthPayloadReceived = SignalInfo("on_auth_payload_received", String::class.java)

    // Launcher for starting the WebViewActivity and getting a result back.
    private lateinit var webViewLauncher: ActivityResultLauncher<Intent>

    override fun getPluginName() = "GodotDojo" // Aseg√∫rate que coincida con tu build.gradle

    override fun getPluginSignals(): Set<SignalInfo> {
        return setOf(onAuthPayloadReceived)
    }

    /**
     * Called when the main activity is created.
     * We use this to set up the ActivityResultLauncher, which is the modern
     * and recommended way to handle activity results.
     */
    override fun onMainCreate(activity: Activity): View? {
        Log.d(TAG, "onMainCreate")

        // We need to cast to AppCompatActivity to use the modern Activity Result APIs.
        // This is a requirement for this plugin to function.
        (activity as? AppCompatActivity)?.let { appCompatActivity ->
            webViewLauncher = appCompatActivity.registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
                // This callback is executed when WebViewActivity finishes.
                if (result.resultCode == Activity.RESULT_OK) {
                    // Extract the payload from the result intent.
                    val payload = result.data?.getStringExtra(WebViewActivity.RESULT_PAYLOAD)

                    if (payload != null) {
                        Log.d(TAG, "Payload received from WebViewActivity.")
                        // Emit the signal to Godot with the payload.
                        emitSignal(onAuthPayloadReceived.name, payload)
                    } else {
                        Log.w(TAG, "WebViewActivity finished with OK but no payload.")
                    }
                } else {
                    Log.d(TAG, "WebViewActivity cancelled or finished with an error.")
                }
            }
        } ?: Log.e(TAG, "Your main activity must extend AppCompatActivity to use this plugin.")

        return super.onMainCreate(activity)
    }

    /**
     * This function is called from Godot to start the authentication process.
     * It launches the WebViewActivity with the provided Cartridge URL.
     *
     * @param url The full URL generated by `controller_generate_url_and_public_key`.
     */
    @UsedByGodot
    fun openAuthWebView(url: String) {
        if (!this::webViewLauncher.isInitialized) {
            Log.e(TAG, "WebView launcher not initialized. Cannot open auth view. Is your main activity an AppCompatActivity?")
            return
        }

        Log.d(TAG, "Opening auth WebView with URL: $url")
        val intent = Intent(activity, WebViewActivity::class.java)
        intent.putExtra(WebViewActivity.EXTRA_URL, url)
        webViewLauncher.launch(intent)
    }
}