<?xml version="1.0" encoding="UTF-8" ?>
<class name="ControllerAccount" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Manages controller accounts to interact with the Dojo ecosystem.
	</brief_description>
	<description>
		This class provides a Godot interface for Dojo controller accounts. It allows for authentication, transaction execution, and player account management.
		The account can be generated on the fly or imported. Once connected, you can use it to execute systems in the Dojo world.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="create">
			<return type="void" />
			<param index="0" name="policies_data" type="Dictionary" default="{}" />
			<description>
				Creates and initializes a new controller account.
				This method starts the process of creating a controller account, which can be used to sign transactions and authenticate with Dojo services. It emits the [signal controller_connected] signal upon successful completion.
			</description>
		</method>
		<method name="disconnect_controller">
			<return type="void" />
			<description>
				Disconnects the current controller account and clears the session.
			</description>
		</method>
		<method name="execute_from_outside">
			<return type="void" />
			<param index="0" name="to" type="String" />
			<param index="1" name="selector" type="String" />
			<param index="2" name="args" type="Variant" default="[]" />
			<description>
				Executes a transaction from an external account.
			</description>
		</method>
		<method name="execute_raw">
			<return type="void" />
			<param index="0" name="to" type="String" />
			<param index="1" name="selector" type="String" />
			<param index="2" name="args" type="Variant" default="[]" />
			<description>
				Executes a raw transaction using the connected controller account. [code]to[/code] is the contract address, [code]selector[/code] is the function selector, and [code]args[/code] is an array of arguments for the function.
			</description>
		</method>
		<method name="get_account_info" qualifiers="const">
			<return type="Dictionary" />
			<description>
				Returns a dictionary with the current account information, such as address and username.
			</description>
		</method>
		<method name="get_address" qualifiers="const">
			<return type="String" />
			<description>
				Gets the address of the controller account as a hex string. Returns "0x0" if not connected.
			</description>
		</method>
		<method name="get_contract_address">
			<return type="String" />
			<description>
			</description>
		</method>
		<method name="get_username" qualifiers="const">
			<return type="String" />
			<description>
				Gets the username associated with the controller account. Returns an empty string if not connected.
			</description>
		</method>
		<method name="init_provider">
			<return type="void" />
			<description>
				Initializes the RPC provider based on the [member rpc_url].
			</description>
		</method>
		<method name="is_controller_connected" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if a controller account is connected and ready to use.
			</description>
		</method>
		<method name="set_contract_address">
			<return type="void" />
			<param index="0" name="p_contract_address" type="String" />
			<description>
			</description>
		</method>
		<method name="setup">
			<return type="void" />
			<description>
				Sets up the controller as a singleton.
			</description>
		</method>
	</methods>
	<members>
		<member name="chain_id" type="String" setter="set_chain_id" getter="get_chain_id" default="&quot;&quot;">
			The Chain ID to connect to, e.g., "KATANA" or "SN_SEPOLIA".
		</member>
		<member name="contract_address" type="Dictionary" setter="set_policies" getter="get_policies" default="{}">
		</member>
		<member name="policies" type="Dictionary" setter="set_policies" getter="get_policies" default="{}">
			The [DojoPolicies] resource that defines the account's policies.
		</member>
		<member name="rpc_url" type="String" setter="set_rpc_url" getter="get_rpc_url" default="&quot;&quot;">
			The URL of the Katana/Starknet RPC node to connect to.
		</member>
	</members>
	<signals>
		<signal name="controller_connected">
			<param index="0" name="success" type="bool" />
			<description>
				Emitted when the controller account has successfully connected.
			</description>
		</signal>
		<signal name="controller_disconnected">
			<description>
				Emitted when the controller account has been disconnected.
			</description>
		</signal>
		<signal name="current_user_info">
			<param index="0" name="user_info" type="Dictionary" />
			<description>
				Emitted with the current user's information.
			</description>
		</signal>
		<signal name="provider_status_updated">
			<param index="0" name="success" type="bool" />
			<description>
				Emitted to update the status of the RPC provider.
			</description>
		</signal>
		<signal name="transaction_executed">
			<param index="0" name="transaction_hash" type="String" />
			<description>
				Emitted when a transaction has been successfully executed. Contains the transaction hash.
			</description>
		</signal>
		<signal name="transaction_failed">
			<param index="0" name="error_message" type="String" />
			<description>
				Emitted if a transaction fails. Contains the error message.
			</description>
		</signal>
	</signals>
</class>
